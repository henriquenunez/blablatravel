-- usuario{email, nome_completo, ident_nacional*, username*, biografia, senha*, pais, telefone, foto, bool_guia*, bool_turista*}
CREATE TABLE USUARIO (
    EMAIL VARCHAR(50),
    NOME_COMPLETO VARCHAR(100),
    IDENT_NACIONAL VARCHAR(50) NOT NULL,
    USERNAME VARCHAR(50) NOT NULL,
    BIOGRAFIA VARCHAR(140), -- We like twitter
    SENHA VARCHAR(50) NOT NULL,
    PAIS VARCHAR(50),
    TELEFONE VARCHAR(50),
    FOTO VARCHAR(200),
    BOOL_GUIA BOOLEAN NOT NULL,
    BOOL_TURISTA BOOLEAN NOT NULL,

    CONSTRAINT PK_USUARIO PRIMARY KEY (EMAIL),
	CONSTRAINT CK_USUARIO CHECK(BOOL_GUIA!=false OR BOOL_TURISTA!=false)
);

-- guia{usuario}
CREATE TABLE GUIA (
    USUARIO VARCHAR(50),

    CONSTRAINT PK_GUIA PRIMARY KEY (USUARIO),
    CONSTRAINT FK_GUIA FOREIGN KEY (USUARIO) REFERENCES USUARIO(EMAIL) ON DELETE CASCADE
);

-- turista{usuario}
CREATE TABLE TURISTA (
    USUARIO VARCHAR(50),

    CONSTRAINT PK_TURISTA PRIMARY KEY (USUARIO),
    CONSTRAINT FK_TURISTA FOREIGN KEY (USUARIO) REFERENCES USUARIO(EMAIL) ON DELETE CASCADE
);

-- mensagem{usuario_envia, usuario_recebe, mensagem*, data}
CREATE TABLE MENSAGEM (
    USUARIO_ENVIA VARCHAR(50),
    USUARIO_RECEBE VARCHAR(50),
    MENSAGEM VARCHAR(280) NOT NULL, -- We like twitter
    DATA TIMESTAMP,
    
    CONSTRAINT PK_MENSAGEM PRIMARY KEY (USUARIO_ENVIA, USUARIO_RECEBE, DATA),
    CONSTRAINT FK_MSG_USR_REC FOREIGN KEY (USUARIO_ENVIA) REFERENCES USUARIO(EMAIL) ON DELETE CASCADE,
    CONSTRAINT FK_MSG_USR_ENV FOREIGN KEY (USUARIO_RECEBE) REFERENCES USUARIO(EMAIL) ON DELETE CASCADE
);

-- usuario_idioma{usuario, idioma}
CREATE TABLE USUARIO_IDIOMA (
    USUARIO VARCHAR(50),
    IDIOMA VARCHAR(50),

    CONSTRAINT PK_USUARIO_IDIOMA PRIMARY KEY (USUARIO, IDIOMA),
    CONSTRAINT FK_USUARIO_IDIOMA FOREIGN KEY (USUARIO) REFERENCES USUARIO(EMAIL) ON DELETE CASCADE
);

-- tecnico{email, nome*, senha*, telefone, enfase}
CREATE TABLE TECNICO (
    EMAIL VARCHAR(50),
    NOME VARCHAR(50) NOT NULL,
    SENHA VARCHAR(50) NOT NULL,
    TELEFONE VARCHAR(20),
    ENFASE VARCHAR(50),
    
    CONSTRAINT PK_TECNICO PRIMARY KEY (EMAIL)
);

-- atendente{email, nome*, senha*, telefone}
CREATE TABLE ATENDENTE (
    EMAIL VARCHAR(50),
    NOME VARCHAR(50) NOT NULL,
    SENHA VARCHAR(50) NOT NULL,
    TELEFONE VARCHAR(20),
    
    CONSTRAINT PK_ATENDENTE PRIMARY KEY (EMAIL)
);

-- passeio{guia, data, idioma*, titulo*, descricao*, pais, cidade, latitude*, longitude*, referencia, preco*, vagas*}
CREATE TABLE PASSEIO (
    GUIA VARCHAR(50),
    DATA TIMESTAMP,
    IDIOMA VARCHAR(50) NOT NULL,
    TITULO VARCHAR(50) NOT NULL,
    DESCRICAO VARCHAR(280) NOT NULL,
    PAIS VARCHAR(50),
    CIDADE VARCHAR(50),
    LATITUDE VARCHAR(50) NOT NULL,
    LONGITUDE VARCHAR(50) NOT NULL,
    REFERENCIA VARCHAR(100),
    PRECO FLOAT NOT NULL,
    VAGAS INT NOT NULL,

    CONSTRAINT PK_PASSEIO PRIMARY KEY (GUIA, DATA),
    CONSTRAINT FK_PASSEIO FOREIGN KEY (GUIA) REFERENCES GUIA(USUARIO) ON DELETE CASCADE
);

-- atracao{nome, referencia, longitude*, latitude*, pais, cidade, status_validacao*, data_validacao, atendente_validacao, palavra_chave1, palavra_chave2, palavra_chave3}
CREATE TABLE ATRACAO (
    NOME VARCHAR(50),
    REFERENCIA VARCHAR(100),
    LONGITUDE VARCHAR(50) NOT NULL,
    LATITUDE VARCHAR(50) NOT NULL,
    PAIS VARCHAR(50),
    CIDADE VARCHAR(50),
    STATUS_VALIDACAO VARCHAR(9) CHECK(STATUS_VALIDACAO IN('EM_ESPERA', 'ACEITO', 'REJEITADO')) NOT NULL,
    DATA_VALIDACAO TIMESTAMP,
    ATENDENTE_VALIDACAO VARCHAR(50),
    PALAVRA_CHAVE_1 VARCHAR(50),
    PALAVRA_CHAVE_2 VARCHAR(50),
    PALAVRA_CHAVE_3 VARCHAR(50),

    CONSTRAINT PK_ATRACAO PRIMARY KEY (NOME),
    CONSTRAINT FK_ATRACAO_ATENDENTE FOREIGN KEY (ATENDENTE_VALIDACAO) REFERENCES ATENDENTE(EMAIL) ON DELETE SET NULL
);

-- passeio_atracao{guia, data, atracao}
CREATE TABLE PASSEIO_ATRACAO (
    GUIA VARCHAR(50),
    DATA TIMESTAMP,
    ATRACAO VARCHAR(50),

    CONSTRAINT PK_PASSEIO_ATRACAO PRIMARY KEY (GUIA, DATA, ATRACAO),
    CONSTRAINT FK_PASSEIO_ATRACAO_PASSEIO FOREIGN KEY (GUIA, DATA) REFERENCES PASSEIO(GUIA, DATA) ON DELETE CASCADE,
    CONSTRAINT FK_PASSEIO_ATRACAO_ATRACAO FOREIGN KEY (ATRACAO) REFERENCES ATRACAO(NOME) ON DELETE CASCADE
    -- TODO Check atracao valida
);

-- fotos_passeio{guia, data, foto}
CREATE TABLE FOTOS_PASSEIO (
    GUIA VARCHAR(50),
    DATA TIMESTAMP,
    FOTO VARCHAR(200),
    
    CONSTRAINT PK_FOTOS_PASSEIO PRIMARY KEY (GUIA, DATA, FOTO),
    CONSTRAINT FK_FOTOS_PASSEIOE FOREIGN KEY (GUIA, DATA) REFERENCES PASSEIO(GUIA, DATA) ON DELETE CASCADE
);

-- turista_gosta{turista, atracao}
CREATE TABLE TURISTA_GOSTA (
    TURISTA VARCHAR(50),
    ATRACAO VARCHAR(50),
    
    CONSTRAINT PK_TURISTA_GOSTA PRIMARY KEY (TURISTA, ATRACAO),
    CONSTRAINT FK_TURISTA_GOSTA_TURISTA FOREIGN KEY (TURISTA) REFERENCES TURISTA(USUARIO) ON DELETE CASCADE,
    CONSTRAINT FK_TURISTA_GOSTA_ATRACAO FOREIGN KEY (ATRACAO) REFERENCES ATRACAO(NOME) ON DELETE CASCADE
);

-- fotos_atracao{atracao, foto}
CREATE TABLE FOTOS_ATRACAO (
    ATRACAO VARCHAR(50),
    FOTO VARCHAR(200),
    
    CONSTRAINT PK_FOTOS_ATRACAO PRIMARY KEY (ATRACAO, FOTO),
    CONSTRAINT FK_FOTOS_ATRACAO FOREIGN KEY (ATRACAO) REFERENCES ATRACAO(NOME) ON DELETE CASCADE
);

-- categoria{nome}
CREATE TABLE CATEGORIA (
    NOME VARCHAR(50),
    
    CONSTRAINT PK_CATEGORIA PRIMARY KEY (NOME)
);

-- atracao_categoria{atracao, categoria}
CREATE TABLE ATRACAO_CATEGORIA (
    ATRACAO VARCHAR(50),
    CATEGORIA VARCHAR(50),
    
    CONSTRAINT PK_ATRACAO_CATEGORIA PRIMARY KEY (ATRACAO, CATEGORIA),
    CONSTRAINT FK_ATRACAO_CATEGORIA_ATRACAO FOREIGN KEY (ATRACAO) REFERENCES ATRACAO(NOME) ON DELETE CASCADE,
    CONSTRAINT FK_ATRACAO_CATEGORIA_CATEGORIA FOREIGN KEY (CATEGORIA) REFERENCES CATEGORIA(NOME) ON DELETE CASCADE
);

-- participacao{NroParticipacao, guia*, data*, turista*}
CREATE TABLE PARTICIPACAO (
    NRO_PARTICIPACAO INT,
    GUIA VARCHAR(50) NOT NULL,
    DATA TIMESTAMP NOT NULL,
    TURISTA VARCHAR(50) NOT NULL,
    
    CONSTRAINT PK_PARTICIPACAO PRIMARY KEY (NRO_PARTICIPACAO),
    CONSTRAINT FK_PARTICIPACAO_TURISTA FOREIGN KEY (TURISTA) REFERENCES TURISTA(USUARIO) ON DELETE SET NULL,
    CONSTRAINT FK_PARTICIPACAO_PASSEIO FOREIGN KEY (GUIA, DATA) REFERENCES PASSEIO(GUIA, DATA) ON DELETE SET NULL,
    CONSTRAINT UN_PARTICIPACAO UNIQUE(GUIA, DATA, TURISTA),
    CONSTRAINT CK_PARTICIPACAO CHECK(GUIA != TURISTA)
);


--relato_de_viagem{usuario, data, status*, mensagem, tipo*, atendente, participacao*}
CREATE TABLE RELATO_DE_VIAGEM (
    USUARIO VARCHAR(50),
    DATA TIMESTAMP,
    STATUS VARCHAR(10) CHECK(STATUS IN('PENDENTE', 'EM_ANALISE', 'RESOLVIDO')) NOT NULL,
    MENSAGEM VARCHAR(280), -- We like twitter
    TIPO VARCHAR(14) CHECK(TIPO IN('DENUNCIA', 'OBJETO_PERDIDO', 'OUTRO')) NOT NULL,
    ATENDENTE VARCHAR(50),
    PARTICIPACAO INT NOT NULL,
    
    CONSTRAINT PK_RELATO_DE_VIAGEM PRIMARY KEY (USUARIO, DATA),
    CONSTRAINT FK_RELATO_DE_VIAGEM_USUARIO FOREIGN KEY (USUARIO) REFERENCES USUARIO(EMAIL) ON DELETE CASCADE,
    CONSTRAINT FK_RELATO_DE_VIAGEM_ATENDENTE FOREIGN KEY (ATENDENTE) REFERENCES ATENDENTE(EMAIL) ON DELETE SET NULL,
    CONSTRAINT FK_RELATO_DE_VIAGEM_PARTICIPACAO FOREIGN KEY (PARTICIPACAO) REFERENCES PARTICIPACAO(NRO_PARTICIPACAO) ON DELETE SET NULL
    --CONSTRAINT CK_RELATO_DE_VIAGEM CHECK(
    --    ((STATUS='EM_ANALISE' OR STATUS='RESOLVIDO') AND ATENDENTE IS NOT NULL)
    --    OR
    --    (STATUS='PENDENTE' AND ATENDENTE IS NULL))
);

-- relato_de_bug{usuario, data, status*, mensagem, log_de_erro*, tipo_de_erro*,tecnico}
CREATE TABLE RELATO_DE_BUG (
    USUARIO VARCHAR(50),
    DATA TIMESTAMP,
    STATUS VARCHAR(10) CHECK(STATUS IN('PENDENTE', 'EM_ANALISE', 'RESOLVIDO')) NOT NULL,
    MENSAGEM VARCHAR(280), -- We like twitter
    LOG_DE_ERRO VARCHAR(500) NOT NULL,
    TIPO_DE_ERRO VARCHAR(50) NOT NULL,
    TECNICO VARCHAR(50),
    
    CONSTRAINT PK_RELATO_DE_BUG PRIMARY KEY (USUARIO, DATA),
    CONSTRAINT FK_RELATO_DE_BUG_USUARIO FOREIGN KEY (USUARIO) REFERENCES USUARIO(EMAIL) ON DELETE CASCADE,
    CONSTRAINT FK_RELATO_DE_BUG_TECNICO FOREIGN KEY (TECNICO) REFERENCES TECNICO(EMAIL) ON DELETE SET NULL
);

-- relato_de_bug_print{usuario, data, print}
CREATE TABLE RELATO_DE_BUG_PRINT (
    USUARIO VARCHAR(50),
    DATA TIMESTAMP,
    PRINT VARCHAR(200),
    
    CONSTRAINT PK_RELATO_DE_BUG_PRINT PRIMARY KEY (USUARIO, DATA, PRINT),
    CONSTRAINT FK_RELATO_DE_BUG_PRINT FOREIGN KEY (USUARIO, DATA) REFERENCES RELATO_DE_BUG(USUARIO, DATA) ON DELETE CASCADE
);

-- relato_de_viagem_denuncia{usuario, data, usuario_denunciado}
CREATE TABLE RELATO_DE_VIAGEM_DENUNCIA (
    USUARIO VARCHAR(50),
    DATA TIMESTAMP,
    USUARIO_DENUNCIADO VARCHAR(50),
    
    CONSTRAINT PK_RELATO_DE_VIAGEM_DENUNCIA PRIMARY KEY (USUARIO, DATA),
    CONSTRAINT FK_RELATO_DE_VIAGEM_DENUNCIA_RELATO FOREIGN KEY (USUARIO, DATA) REFERENCES RELATO_DE_VIAGEM(USUARIO, DATA) ON DELETE CASCADE,
    CONSTRAINT FK_RELATO_DE_VIAGEM_DENUNCIA_USUARIO FOREIGN KEY (USUARIO_DENUNCIADO) REFERENCES USUARIO(EMAIL) ON DELETE SET NULL
);

-- fotos_participacao{participacao, foto}
CREATE TABLE FOTOS_PARTICIPACAO (
    PARTICIPACAO INT,
    FOTO VARCHAR(200),
    CONSTRAINT PK_FOTOS_PARTICIPACAO PRIMARY KEY (PARTICIPACAO, FOTO),
    CONSTRAINT FK_FOTOS_PARTICIPACAO FOREIGN KEY (PARTICIPACAO) REFERENCES PARTICIPACAO(NRO_PARTICIPACAO) ON DELETE CASCADE
);

-- avaliacao_guia{participacao, comentario*, nota*}
CREATE TABLE AVALIACAO_GUIA (
    PARTICIPACAO INT,
    COMENTARIO VARCHAR(280) NOT NULL, -- We like twitter
    NOTA INT NOT NULL,
    
    CONSTRAINT PK_AVALIACAO_GUIA PRIMARY KEY (PARTICIPACAO),
    CONSTRAINT FK_AVALIACAO_GUIA FOREIGN KEY (PARTICIPACAO) REFERENCES PARTICIPACAO(NRO_PARTICIPACAO) ON DELETE CASCADE,
    CONSTRAINT CK_AVALIACAO_GUIA_NOTA CHECK(NOTA>=0 AND NOTA<=5) 
);

-- avaliacao_turista{participacao, titulo*, comentario*, nota*}
CREATE TABLE AVALIACAO_TURISTA (
    PARTICIPACAO INT,
    TITULO VARCHAR(50) NOT NULL,
    COMENTARIO VARCHAR(280) NOT NULL, -- We like twitter
    NOTA INT NOT NULL,
    
    CONSTRAINT PK_AVALIACAO_TURISTA PRIMARY KEY (PARTICIPACAO),
    CONSTRAINT FK_AVALIACAO_TURISTA FOREIGN KEY (PARTICIPACAO) REFERENCES PARTICIPACAO(NRO_PARTICIPACAO) ON DELETE CASCADE,
    CONSTRAINT CK_AVALIACAO_TURISTA_NOTA CHECK(NOTA>=0 AND NOTA<=5)
);
